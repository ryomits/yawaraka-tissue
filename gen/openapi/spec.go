// Package V1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package V1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWX28bRRD/KtHCGxff2ThU3BtCIEUgqCLKSxNVy3mSbPHtXnbXgVBZ6t6plQkxSqPS",
	"fwpVQ0uooI0KCLWRypfp4GvyxFdAe+c4OfsS9yEC8ba3uze/3/xmdmYukUCEkeDAtSL+JSJBRYIryD4+",
	"Evp90eINuw4E18C1XdIoarKAaia4e1EJbvdUsAghtavXJcwTn7zmHhp281PlzoASLRnAwHC73XZIA1Qg",
	"WWTtEd+CTvQPHTIDSy1Q+lPaZI0M8D0phTw1PsN2S+gcXpmA/I5DznHa0otCsq/g9LQ5lkEBLUP/nIsv",
	"+L8BnAEd+N12+gaz3BgEIpIiAqlZnjIN0JQ17Qq+pGHUBOIT4hC9EtmV0pLxBeuEZtqejb2WbZx8q+0Q",
	"CUstJm0wzuenBwBzg9vis4sQaGtzmi/bmJ6lkoajDnAavgIvCbSv8RhmI+gzELDcp6LYmDzC+Ckm14kz",
	"xCiQQDU0LlA9+tdff26mnfX05o/p7Zg4R8jUvFp10jszWa1/4p3xp97y67U3vLd9zyMOmRcytMZIg2qY",
	"1CyEMhcZX5DQYP30KsKm36+nN24XANF0Mb6C5irGqxO1dPPRLN+/+iD9bXei9+AnNN+huVWb5ekfT/e+",
	"uY6XL1fTu3dmeTmu0rIV5Egl/mK8mt7YLWC/uHbvKDzGG2i20HyL5j6abUw2Md7G5Bc0z2b5i2tbOS80",
	"O73Ve2g6aLb7tOKN3saa3YnX0Dzp7aylnfVykoP0PSaIvfVugeHLJ1u97q2/n5uXj7toHu79emcv/hrN",
	"DiYGk98xfobJfYx/xuQxJs8x3t3/4WEZbEs2R0HPzXxYwFrUOlK+6/Z3KoEI3bGvJhJK02YgGuVvJs/a",
	"d0WzCYPIDD18qukJgqDZ2b/S7XVuEocwDaEa3yqyd3L4hKiUdGWEdwZbznio1fwfS1VJ3yv6wPJadiGy",
	"xSzfeRVxCyVwROL/0OV2VgDmhbXaJ9HPvYl3zk4ThyyDVHlqVStexbMsRAScRoz45M2KV6nZ+kn1YqaB",
	"K7N/s/UC6JOrrtU103q6MUBVmTVJQ9AgFfHPH3UWkw4mdzHp2Jy21pZaIFeI0+8hZIk4R1rwsC5zTnHY",
	"qnneKc5ZQ8+1pLt//IEVr+5VjzM2YOcOTyB1rz7+p8MZzyH12tT4H46Z9doOmcqlGUcyH4uyrksXbLBI",
	"Hn4yl7mvQC4fBDErpINKSSNWyU8rGpR2l6ukPdf+JwAA//80RflDGwsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
