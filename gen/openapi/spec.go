// Package V1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package V1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4SUXU8TTRTHvwo5z3Pn0t1WlLh3xiuiiYboFW3MuDuUJd0XZqdEQpowu4FUpKYQ5C1I",
	"QBCJQoMaAyT4ZTh2gSu/gtnZtVDb4N1kds/5/c/5nzOTYLi25zrU4T7ok+AbI9Qm8jhIDcuj8cmkvsEs",
	"j1uuAzpguI/BEYaLoIDHXI8yblEZYTBKODWfE94Z9fPHelStR8sfotUAFKAvie2VKOiQ03LZXq2/N9v3",
	"VOvX79zV+3K3tHu6poECwy6z42RgEk57uWVTUIBPxKrA58xyilBRwHKKjJoWdbpgo3f1aGm1DYiihsE0",
	"ihkMZnty0fp+3rmc2Ym+nvQ0dz6ieItiJZd3ou9HF68XcWoqG22s5Z3uXJ+zspGQutSLwWy0dNLGPpvf",
	"vI7HYAHFFoo3KLZR7GK4jsEuhp9RHOeds/mtRBeKRnN2E0UVxW4qK1hoLszFN8EcisNmYy6q1ruL5BYv",
	"3WRis15rU3h+uNWsrfw6FecHNRR7F1/WLoJXKBoYCgy/YXCM4TYGnzA8wPAUg5PL93vdsGVW6oQ+G3zU",
	"xhrh3PN1VU1vMoZrq53JKgowOla2GDVBHwLP9TkpGa5JodD6130xSg0eg5OpfeCWSrTlTPuUmoSTGxqC",
	"onE5XWtWl0EBi1NbxvzP6DDo8J96tS1quipquieVlhjCGJno0C2xnYorcpCG3ZiSepXW0HP/yQAoME6Z",
	"n0jMZrSMFnNcjzrEs0CH2xktk4v3kPARKVRlMlaei5TfvL1xV0h8P2C2qL7MxohNOWU+6EOT11cnrGK4",
	"gWE17k2cbaxM2QQo4BA7/j4GSvqCyHL+8rEQN8T3XMdP9OU0Tb4arsPT3SWeV7IMKUkd9RPzrvL924Rr",
	"tsvGtpf++KE0hZNiXBcknYKC/NOnbPxPvXJ2W8NJPCuTfM1w6nN1PAuVQuV3AAAA//+TulgNOAUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
