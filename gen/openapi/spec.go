// Package V1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package V1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW3W7cRBR+ldXAHe7au2yo8B1CIEUgqCLKTRNVg32SuKxnnJnZQFSt1LHVaglZlEal",
	"fwpVQ0uooI0KCLWRysv0sG5yxSugsZ1NvOtkexEJcXc8Mz7fd77zM3OZeDyMOAOmJHEvEwEy4kxC9vEJ",
	"Vx/yDvON7XGmgClj0ihqBx5VAWf2JcmZWZPeIoTUWG8KmCcuecM+dGznu9KeAck7woOh4263axEfpCeC",
	"yPgjrgGtFZsWmYGlDkj1OW0Hfgb4gRBcnBqfUb8VdA6P1CA/Y5Hz7EvGv2KnRuNY8ALoALlrFQ6z7Ayl",
	"iASPQKggT5oPigZtY8HXNIzaQFxCLKJWImNJJQK2YIJQgTJ7E49lCyef6lpEwFInEOAT90K+ewAwNzzN",
	"v7gEnjI+p9myUfUcFTQcD4DR8DV4CaCFxhOYjaHPgBfkMZXFxuQxxs8wuUGsEUaeAKrAv0jV+F9//7WZ",
	"9tbTWz+ld2JiHSHTdJqNM87ZM43WZ85Zd+odt9V8y3nXdRxikXkuQuOM+FTBGRWEUBViwBYE+EFRXmXY",
	"9If19OadEiDqPsZXUV/DeLXWTDcfz7L9aw/T33drg4c/o/4e9e3mLEv/fLb37Q28cqWR3rs7y6pxpRId",
	"L0eqiBfj1fTmbgn75fX7R+Ex3kC9hfo71A9Qb2OyifE2Jr+ifj7LXl7fynmh3hms3kfdQ71d0Io3Bhtr",
	"ZiVeQ/10sLOW9tarSQ7L95gkDtb7JYavnm4N+rf/eaFfPemjfrT32929+BvUO5hoTP7A+DkmDzD+BZMn",
	"mLzAeHf/x0dVsB3RHgc9P/NxCWtRqUi6tl2s1D0e2hO7JuJS0bbH/eqeyav2fd5uwzAzI41PFT1BENQ7",
	"+1f7g94tYpFAQSgnD+usTw5biApBV8Z4Z7DVjEeG/f9xVFXcPOUYgnyWXYzMMMtXXkfc0ggck/g/DLmb",
	"DYB5brwWJIraq713bppYZBmEzEurUXfqjmHBI2A0CohL3q479aaZn1QtZhrYIvs3sxdAnTx1ja6Z1tP+",
	"EFVm3gQNQYGQxL1wNFhMepjcw6Rnatp4W+qAWCFWcYeQJWIduYJHdZmzys+dpuOc4ktnpF0rbvdPPzLi",
	"tZzWcc6G7OzDB5NFWs2pyT8c83DqWmQqj/Lk3w9eONkFSheM7iTPJJnLIpEglg/ykc3E4dCjUVDPd+sK",
	"pLKXG6Q71/03AAD//xD3zPhoCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
